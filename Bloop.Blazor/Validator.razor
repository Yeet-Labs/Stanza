@implements IValidator
@typeparam TData

@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<CascadingValue Name="Validator" Value="this" IsFixed>
    @if (Summarize && ShowResultsAsHeader)
    {
        @Results
    }

    @ChildContent(this)

    @if (Summarize && !ShowResultsAsHeader)
    {
        @Results
    }
</CascadingValue>

@code
{      
    // TODO: Create IValidator interface to remove requirement that Message must have a type parameter for TValidation, and change ChildContent context to instead be passed into Messages via CascadingValueProvider and CascadingParameter.

    [Parameter]
    public RenderFragment<Validator<TData>> ChildContent { get; set; }

    [Parameter]
    public bool Summarize { get; set; }

    // ALTERNATE NAME: ShowHeader

    [Parameter]
    public bool ShowResultsAsHeader { get; set; }

    [Parameter]
    public TData Data
    {
        get => StoredData;
        set => StoredData ??= value;
    }

    TData StoredData { get; set; }

    public Action StateModificationHandler => StateHasChanged;

    public HashSet<IMessage> Messages { get; } = new HashSet<IMessage> { };

    public bool FailedValidation => Messages.SelectMany(message => message.Results).Any(result => !result.Positive);

    public RenderFragment Results =>
    @<text>
        @foreach (IMessage message in Messages)
        {
            foreach (Validation.Analysis analysis in message.Results.Where(result => !result.Positive))
            {
                @message.ChildContent(analysis)
                <br />
            }
        }
    </text>;
}